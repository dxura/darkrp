@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="radial-menu" onclick="@(() => HandleCenterClick())">
        <label class="title">Menu</label>
    </div>
    <div class="options">
        <div class="btn">
            <i class="material-icons md-36">photo_camera</i>
        </div>
        <div class="btn">
            <i class="material-icons md-36">photo</i>
        </div>
        <div class="btn">
            <i class="material-icons md-36">music_note</i>
        </div>
        <div class="btn">
            <i class="material-icons md-36">chat_bubble</i>
        </div>
        <div class="btn">
            <i class="material-icons md-36">settings</i>
        </div>
        <div class="btn">
            <i class="material-icons md-36">phone</i>
        </div>
        <div class="btn">
            <i class="material-icons md-36">cloud</i>
        </div>
        <div class="btn">
            <i class="material-icons md-36">videocam</i>
        </div>
    </div>
</root>

@code
{
    [Property] public EquipmentResource Toolgun { get; set; } = null!;
	[Property, TextArea] public string MyStringValue { get; set; } = "Hello World!";

    public Player Player => PlayerState.Local.Player;
    protected bool IsActive { get; set; }

    protected bool IsRadialMenuActive { get; set; }

    protected override void OnTreeFirstBuilt()
	{
		BindClass( "active", () => IsActive );
        BindClass( "radial-active", () => IsRadialMenuActive );
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(MyStringValue, IsActive, IsRadialMenuActive);


    protected override void OnUpdate()
	{
        base.OnUpdate();

        if ( !Player.IsValid() ^ Player.CurrentEquipment.Resource != Toolgun )
            return;

        if ( Input.Pressed( "Use" ) )
        {
            Log.Info("Toggling Toolgun Radial Menu");
            IsActive ^= true;

            if ( IsActive )
            {
                IsRadialMenuActive = false;
            }
        }
	}

        private void HandleCenterClick()
        {
            IsRadialMenuActive ^= true;
        }
}